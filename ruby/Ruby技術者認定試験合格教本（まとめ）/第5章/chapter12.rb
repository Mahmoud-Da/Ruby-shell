"Time"
# 1970年01月01日は起算時

"Timeオブジェクト生成"
Time.new # 現在時刻のTimeオブジェクトを生成して返す  
Time.now # 現在時刻のTimeオブジェクトを生成して返す  
Time.at # 引数で指定した起算時からの秒数に対応するTimeオブジェクトを生成して返す、さらに精度が必要な場合には、2番目の引数にマイクロ秒を指定する
Time.mktime # 与えらた引数の数に応じて、意味が変わるメソッドでもあるため、注意
# 引数は7個の場合は先頭から（年、月、日、時、分、秒、マイクロ秒）
# 引数は10個の場合は先頭から（秒、分、時、日、月、年、曜日、年日、夏時間かどうかの真理値、ライムゾーン）
Time.local # Time.mktimeと同じ
Time.gm # Time.mktimeと同じが、タイムゾーンがUTC
Time.utc # Time.gmと同じ

Time.now #=> 2023-10-26 01:38:52.365659 +0900
Time.at(12345) #=> 1970-01-01 12:25:45 +0900
Time.at(123, 123) #=> 1970-01-01 09:02:03.000123 +0900
Time.mktime(2017) #=> 2017-01-01 00:00:00 +0900
Time.mktime(0, 0, 0, 7, 7, 2017, 4, 188, false, "JST") #=> 2017-07-07 00:00:00 +0900

"Timeオブジェクトの属性を取得する"
*year # 年
*mon / month # 月
*day / mday # 日
*hour # 時
*min # 分
*sec # 秒
*usec / tv_usec # マイクロ秒 
*wday # 曜日に対する数値を返す。日曜から土曜（0 ~ 6）
*yday # 1月1日からの日数を返す
*zone # 現在の標準時間帯を参照
*isdst / dst? # 夏時間かどうか
*gmt? / utc? # UTCかどうかを返す
*gmt_offset / gmtoff # UTC時刻との差を秒単位の数値として返す

t = Time.mktime(2017, 1, 2, 3, 4, 5, 6)
# => 2017-01-02 03:04:05.000006 +0900

t.year #=> 2017
t.mday #=> 2
t.sec #=> 5
t.wday #=> 1
t.yday #=> 2
t.isdst #=> false
t.gmt? #=> false
t.gmtoff #=> 32400
t.gmtoff / 9 #=> 3600


"タイムゾーンを変更"
*localtime # ライムゾーンローカルでタイムで返す
*gmtime / utc # UTCに変更
*getlocal # ライムゾーンローカルでタイムで返す (新しいオプジェクトを返す)
*getgm / getutc # UTCに変更　(新しいオプジェクトを返す)

t = Time.mktime(2017, 1, 2, 3, 4, 5, 6)
# => 2017-01-02 03:04:05.000006 +0900

t.object_id #=> 78780
t1 = t.getlocal #=> 2017-01-02 03:04:05.000006 +0900
t1.object_id #=> 111260

"Timeオブジェクトの演算"
# Timeオブジェクト同士の差を求めることもできるが、結果はFloatで返す

t = Time.mktime(2017, 1, 2, 3, 4, 5, 6)
#=> 2017-01-02 03:04:05.000006 +0900

t + 60 * 2 - 30 #=> 2017-01-02 03:05:35.000006 +0900

t1 = Time.mktime(2017, 1, 2, 3, 4, 5, 6) #=> 2017-01-02 03:04:05.000006 +0900
t2 = Time.mktime(2017, 2, 2, 3, 4, 5, 6) #=> 2017-02-02 03:04:05.000006 +0900
t2 - t1 #=> 2678400.0

"Timeオブジェクトの変換"
*to_i / tv_sec # 起算時からの秒数
*to_f # 浮動小点数で返す
*to_a # 先頭から[秒、分、時、日、月、年、曜日]
*to_s # UNIXコマンドdateコマンドのような形式を返す
*strftime # 指定したフォーマットに従って文字列を返す

t = Time.mktime(2017, 1, 2, 3, 4, 5, 6) #=> 2017-01-02 03:04:05.000006 +0900
t.to_i #=> 1483293845
t.tv_sec #=> 1483293845
t.to_f #=> 1483293845.000006
t.to_a #=> [5, 4, 3, 2, 1, 2017, 1, 2, false, "JST"]
t.to_s #=> "2017-01-02 03:04:05 +0900"
t.strftime("%Y年%m月%d日 %H時%M分%S秒") #=> "2017年01月02日 03時04分05秒" 

# %A: 曜日の名称(Sunday, Monday ... )
# %a: 曜日の省略名(Sun, Mon ... )
# %B: 月の名称(January, February ... )
# %b: 月の省略名(Jan, Feb ... )
# %C: 世紀 (2009年であれば 20)
# %c: 日付と時刻 (%a %b %e %T %Y)
# %D: 日付 (%m/%d/%y)
# %d: 日(01-31)
# %e: 日。一桁の場合、半角空白で埋める ( 1..31)
# %F: %Y-%m-%d と同等 (ISO 8601の日付フォーマット)
# %G: ISO 8601の暦週の年
# %g: ISO 8601の暦週の年の下2桁(00-99)
# %H: 24時間制の時(00-23)
# %h: %b と同等
# %I: 12時間制の時(01-12)
# %j: 年中の通算日(001-366)
# %k: 24時間制の時。一桁の場合、半角空白で埋める ( 0..23)
# %L: ミリ秒 (000..999)
# %l: 12時間制の時。一桁の場合、半角空白で埋める ( 0..12)
# %M: 分(00-59)
# %m: 月を表す数字(01-12)
# %n: 改行 (\n)
# %N: 秒の小数点以下。桁の指定がない場合は9桁 (ナノ秒)、%6N: マイクロ秒 (6桁)、%3N: ミリ秒 (3桁)
# %P: 午前または午後(am,pm)
# %p: 午前または午後(AM,PM)
# %Q: 1970-01-01 00:00:00 UTC からの経過ミリ秒 (Time#strftime は対応していませんが、Date#strftime で使えます)
# %R: 24時間制の時刻。%H:%M と同等。
# %r: 12時間制の時刻。%I:%M:%S %p と同等。
# %S: 秒(00-60) (60はうるう秒)
# %s: 1970-01-01 00:00:00 UTC からの経過秒
# %T: 24時間制の時刻。%H:%M:%S と同等。
# %t: タブ文字 (\t)
# %U: 週を表す数。最初の日曜日が第1週の始まり(00-53)
# %u: 月曜日を1とした、曜日の数値表現 (1..7)
# %V: ISO 8601形式の暦週 (01..53)
# %v: VMS形式の日付 (%e-%^b-%4Y)
# %W: 週を表す数。最初の月曜日が第1週の始まり(00-53)
# %w: 曜日を表す数。日曜日が0(0-6)
# %X: 時刻 (%Tと同等)
# %x: 日付 (%Dと同等)
# %Y: 西暦を表す数
# %y: 西暦の下2桁(00-99)
# %Z: タイムゾーン (環境依存)
# %z: タイムゾーン。UTCからのオフセット (例 +0900)
# %:z: タイムゾーン。コロンが入ったUTCからのオフセット (例 +09:00)
# %::z: タイムゾーン。コロンが入った秒まで含むUTCからのオフセット (例 +09:00:00)
# %%: %自身
# %+: : date(1)の形式 (%a %b %e %H:%M:%S %Z %Y) (Time#strftime は対応していませんが、Date#strftime で使えます)
