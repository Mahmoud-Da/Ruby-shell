"Array"
"生成1"
a = Array.new
a = []

"生成2"
a = [1, 2, 3] #=> [1, 2, 3]
a.class #=> Array
Array[1, 2, 3] #=> [1, 2, 3]

"生成2"
Array.new(3, "str") #=> ["str", "str", "str"]
Array.new([1, 2, 3]) #=> [1, 2, 3]
# プロックには配列のインデックスを渡せれ、プロックの評価結果各要素の値として設定する
Array.new(3) {|i| i * 3} #=> [0, 3, 6]

"配列に要素を追加"
<< # 指定された「引数」にあるオブジェクトを自身自分の末尾に追加
*push # << と同じ
*concat # 指定された「配列」にあるオブジェクトを自身自分の末尾に追加
*insert # 二つの引数を渡わされ、一番目の引数で指定された場所、それ以降指定さらたオプジェクトを挿入
+ # 自分自身と引数で与えられた配列を連結した配列を新たに生成する
*unshift # 指定された「引数」にあるオブジェクトを自身自分の[先頭]に追加

"例"
a = [1, 2, 3]
a << 4 #=> [1, 2, 3, 4]
a.push(5) #=> [1, 2, 3, 4, 5]
a.concat [5, 6] #=> [1, 2, 3, 4, 5, 5, 6]
a.insert(3, 9)#=> [1, 2, 3, 9, 4, 5, 5, 6]
a.insert(3, 16, 16)#=> [1, 2, 3, 16, 16, 9, 4, 5, 5, 6]

a.object_id #=> 79180
b = a + [10] #=> [1, 2, 3, 16, 16, 9, 4, 5, 5, 6, 10]
b.object_id #=> 87600

a.unshift(10) #=> [10, 1, 2, 3, 16, 16, 9, 4, 5, 5, 6]

"配列を変換"
# (オブジェクトID変換しない)
[]= # 指定したインデックスにある要素を書き換え。インデックス（Range、整数から）始点と終点を指定でき、配列の要素より大きな引数入れいるnilを戻す 
*fill # 全ての要素を指定したオプジェクトに変更します。
*replace # 指定された配列配列自分自身の内奥置き換えます

"[]の例"
a = [1, 2, 3]
a[1] = 10 
p a#=> [1, 10, 3]
a[1..2] = [11, 12]
p a #=> [1, 11, 12]
a[8] = 8
p a #=> [1, 11, 12, nil, nil, nil, nil, nil, 8]

"fillの例"
a = [1, 2, 3]
a.fill("s") #=> ["s", "s", "s"]
a.fill("t", 1..2) #=> ["s", "t", "t"]
a.fill(1..2){|index| index} #=> ["s", 1, 2]

"replaceの例"
a = [1, 2, 3]
a.replace([3, 2, 1]) #=> [3, 2, 1]

"配列の要素を参照する"
