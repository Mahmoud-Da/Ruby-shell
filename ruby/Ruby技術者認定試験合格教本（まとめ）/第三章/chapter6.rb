"配列"
# 配列　Arrayクラスのインスタンス
"例"
a = []
b = [10, true, "30"]
b[0] #=> 10

"二次元配列"
a = [[1, 2], [3, 4]]
a[0][0] #=> 1
a[1][1] #=> 4

"パーセント記法による配列の生成"
*join Method: # 破壊的ではない
v1 = %w(hoge foo bar) #=> ["hoge", "foo", "bar"]
v1.join() #=> "hogefoobar"
v1.join("_") #=> "hoge_foo_bar"
v1 #=>=> ["hoge", "foo", "bar"]

"インスタンスの生成による配列の生成"
a = Array.new(5) #=> [nil, nil, nil, nil, nil]
a.length #=> 5
Array.new(2){|index| index + 10} #=> [10, 11]

"要素の初期値の指定"
*replace Method: 同じオプジェクトIDのもの全てreplaceする
"例1"
a1 = Array.new(2, "a") #=> ["a", "a"] {a[0]とa[1]は同一のオプジェクト}
a1[0].replace("b") #　　{a[0]だけではなく、a[1]もreplaceされる}
p a1 #=> ["b", "b"]

Memo
a1[0].replace("b")の代わりに
a1[0] = "b"
p a1 #=> ["a", "b"]

"例2"
a2 = Array.new(2){"a"} #=> ["a", "a"] {a[0]とa[1]は同一のオプジェクトじゃない}
a2[0].replace("b") #　　{a[0]だけreplaceされる}
p a2 #=> ["b", "a"]

"サイズ超えた要素への代入"
v1 = [10] #=> [10]
v1.length #=> 1
v1[3] = "aa" #=> "aa"
v1.length #=> 4
v1 #=> [10, nil, nil, "aa"]

"インデックスの負の整数を指定"
v1 = [10, nil, nil, "aa"]
p v1[-1] #=> "aa" {「-」をつけると未尾から読み始める}
p v1[4 - 1] #=> "aa" {v1[4-1] == v1[3]}
p v1[-4] #=> 10

"要素数を指定した要素の参照"
配列[読み始めるインデックス, 個分数]
a = [0, 1, 2, 3, 4, 5]
a[2, 3] #=> => [2, 3, 4]　{index「2」から「3」elemnts}

"要素数を指定した代入"
a = [0, 1, 2, 3]
a[1, 2] = "a"
p a #=> [0, "a", 3]

"要素数を指定して配列を代入"
a = [0, 1, 2, 3]
a[1, 2] = ["a", "b"]
p a #=> [0, "a", "b", 3]

"要素数を指定して複数の式を代入"
a = [0, 1, 2, 3]
a[1, 2] = "a", "b"
p a #=> [0, "a", "b", 3]

"指定数以上の個数の値を代入"
a = [0, 1, 2, 3]
a[1, 2] = "a", "b", "c"
p a #=> [0, "a", "b", "c", 3]


"多重代入と可変長引数"
a, b, c = 1, 2, 3
p a, b, c #=> [1, 2, 3]
p a #=> 1
p b #=> 2
p c #=> 3


"返り値に変数の値を指定"
# return が必須
def foo
  return 1, 2, 3
end
a, b, c = 1, 2, 3
p a #=> 1
p b #=> 2
p c #=> 3

# returnなしで
def foo
  1, 2, 3
end

#=> SyntaxError

"配列による多重代入"
a, b, c = [1, 2, 3]
(a, b), c =[1, 2], 3
p a #=> 1
p b #=> 2
p c #=> 3

p (a, b) #=> SyntaxError
p a, b #=> [1, 2]

"多重代入で値の個数が足りない場合"
a, b, c = 1, 2
p a #=> 1
p b #=> 2
p c #=> nil


"多重代入で値の個数が多い場合"
a, b, c = 1, 2, 3
p a #=> 1
p b #=> 2

"1つの変数に複数の値を代入"
a = 1, 2
p a #=> [1, 2]

"最後の変数に配列で代入"
a , *b = 1, 2, 3
p a #=> 1
p b #=> [2, 3]

"可変長引数"
def foo a, *b
  b
end

foo(1, 2, 3) #=> [2, 3]  {a[1] b[2, 3]}

"引数展開"
def foo1 a, *b
  foo2(*b)
end

def foo2 c, *d
  d
end
foo1(1, 2, 3) #=> [3]

"配列の演算"

"&と|"
a = [1, 1, 2, 2]
b = [2, 2, 3, 3]

# 共通
a & b #=> [2]
# 全
a | b #=> [1, 2, 3]

# +
a + b #=> [1, 1, 2, 2, 2, 2, 3, 3]

# -
# 右にある配列の要素が全て取り除く
a - b #=> [1, 1]
"例"
a = [1, 1, 2, 2]
c = [1]
a - c #=> [2, 2]

"*演算子"
[1, 2] * 3 #=> [1, 2, 1, 2, 1, 2]
[1, 2, 3] * "-" #=> "1-2-3"
[1, 2, 3].join("-") #=> "1-2-3"
